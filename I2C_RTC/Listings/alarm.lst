C51 COMPILER V9.57.0.0   ALARM                                                             01/29/2019 10:37:33 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE ALARM
OBJECT MODULE PLACED IN .\Objects\alarm.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE alarm.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\ala
                    -rm.lst) TABS(2) OBJECT(.\Objects\alarm.obj)

line level    source

   1          #include<reg51.h>
   2          #include "prototype.h"
   3          
   4          #define AM 0
   5          #define PM 1
   6          
   7          
   8          #define su 0x00
   9          #define mn 0x01
  10          #define tu 0x02
  11          #define we 0x03
  12          #define th 0x04
  13          #define fr 0x05
  14          #define sa 0x06
  15          
  16          char temp1,sec,min,hr,hr1,ampm;
  17          int var1,var2,var;
  18          struct alarm_set
  19          {
  20            char status;
  21            char alarm_status;
  22            char hr;
  23            char min;
  24          };
  25            struct alarm_set alarm[2];
  26          
  27          void main(void)
  28          {
  29   1        //TMOD=0x01;
  30   1        //TR0=1;
  31   1        IE=0x90;
  32   1        //char hr2;
  33   1        lcd_init();
  34   1        uart_init();
  35   1        startbit();
  36   1        sendi2c(0xD0);
  37   1        sendi2c(0x00);
  38   1        sendi2c(dec_bcd(56));
  39   1        sendi2c(dec_bcd(59));
  40   1        sendi2c(dec_bcd(10));
  41   1        sendi2c(AM);
  42   1        
  43   1        
  44   1        stopbit();
  45   1      
  46   1      
  47   1      set_date(fr, 23, 02, 18);
  48   1        
  49   1        
  50   1        
  51   1        while(1)
  52   1        {
  53   2        lcd_cmd(0xc8);
  54   2        startbit();
C51 COMPILER V9.57.0.0   ALARM                                                             01/29/2019 10:37:33 PAGE 2   

  55   2        sendi2c(0xD0);
  56   2        sendi2c(0x00);
  57   2        startbit();
  58   2        sendi2c(0xD1);
  59   2        sec=readi2c();
  60   2        readack();
  61   2        min=readi2c();  
  62   2        readack();
  63   2        hr=readi2c();
  64   2           
  65   2      //  hr2=dec_bcd(hr);
  66   2      //  if (ampm == 1)
  67   2      //    {
  68   2      //      hr2=hr2 | 0x40;
  69   2      ////lcd_print("am");      //0100 | 0000 7th bit is used select 12/24 hr format if it is 1 then 12hr is chosen
  70   2      //    }                 //else 24 hr is choosen.6th bit is used to select am/pm       
  71   2      //  else if(ampm == 0)  //if it is 0 am is selected 1 means pm
  72   2      //    {
  73   2      //      hr1=hr2 | 0x60;
  74   2      ////lcd_print("am");        //0110 | 0000
  75   2      //    }
  76   2      //  sendi2c(hr2);
  77   2      //    //i2c_stop();
  78   2      //  
  79   2      ////  nack();
  80   2      ////  stopbit();
  81   2        
  82   2        
  83   2        lcd_digit(bcd_dec(hr));
  84   2          lcd_data(':');
  85   2          lcd_digit(bcd_dec(min));
  86   2            lcd_data(':');
  87   2          lcd_digit(bcd_dec(sec));
  88   2          //hr2=display_ampm(ampm);
  89   2          read_date();
  90   2          
  91   2        }
  92   1      }
  93          
  94          void set_alarm(char x)
  95          {
  96   1        uart_print("set alarm");
  97   1        msdelay(50);
  98   1        uart_print("enter the hour 00-12");
  99   1        var1=uart_rx();
 100   1        var2=uart_rx();
 101   1        var1=var1-48;
 102   1        var2=var2-48;
 103   1        alarm[x].hr=(var1*10)+var2;
 104   1        
 105   1        uart_print("set alarm");
 106   1        msdelay(50);
 107   1        uart_print("enter the minute 00-59");
 108   1        var1=uart_rx();
 109   1        var2=uart_rx();
 110   1        var1=var1-48;
 111   1        var2=var2-48;
 112   1        alarm[x].min=(var1*10)+var2;
 113   1        
 114   1        EA=1;
 115   1      }
 116            
C51 COMPILER V9.57.0.0   ALARM                                                             01/29/2019 10:37:33 PAGE 3   

 117                                             void uart_interrupt(void) interrupt 4
 118                                             {
 119   1                                           EA=0;
 120   1                                           lcd_data('a');
 121   1                                           
 122   1                                           if(TI==1)
 123   1                                           {
 124   2                                             EA=1;
 125   2                                             return;
 126   2                                           }
 127   1                                           else if(RI==1)
 128   1                                           {
 129   2                                             if(SBUF =='c' || SBUF =='C')
 130   2                                             {
 131   3                                               char exp;
 132   3                                               exp=SBUF;
 133   3                                               RI=0;
 134   3                                               
 135   3                                               up1: uart_print("0=alarm0");
 136   3                                               uart_print("\r\n");
 137   3                                               uart_print("1=alarm1");
 138   3                                               uart_print("\r\n");
 139   3                                               uart_print("2=alarm2");
 140   3                                               uart_print("\r\n");
 141   3                                               var=uart_rx();
 142   3                                               if(var==0)
 143   3                                               {
 144   4                                                 status_alarm(0);
 145   4                                                 
 146   4                                               }
 147   3                                               else if(var==1)
 148   3                                               {
 149   4                                                 status_alarm(1);
 150   4                                                 
 151   4                                               }
 152   3                                               else if(var==2)
 153   3                                               {
 154   4                                                 status_alarm(2);
 155   4                                                 
 156   4                                               }
 157   3                                               else 
 158   3                                               {
 159   4                                                 uart_print("invalid option");
 160   4                                                 uart_print("\r\n");
 161   4                                                 goto up1;
 162   4                                               }
 163   3                                             }
 164   2                                           }
 165   1                                         }
 166          
 167          
 168          
 169          
 170          
 171          void status_alarm(char x)
 172          {
 173   1        char temp;
 174   1          uart_print("selected alarm");
 175   1        uart_tx(x);
 176   1        uart_print("\r\n");
 177   1        if(alarm[x].status!=1)
 178   1        {
C51 COMPILER V9.57.0.0   ALARM                                                             01/29/2019 10:37:33 PAGE 4   

 179   2          
 180   2          set_alarm(x);
 181   2        
 182   2        }
 183   1        else
 184   1        {
 185   2      //    uart_print("alarm time:");
 186   2      //    uart_array(alarm[x].hr);
 187   2      //    uart_prin(x);
 188   2      //    uart_array(alarm[x].min);
 189   2      //    up:uart_print("\r\n");
 190   2      //    uart_print("1.reset alarm");
 191   2      //    uart_print("\r\n");
 192   2      //    uart_print("2.delete alarm");
 193   2      //    uart_print("\r\n");
 194   2          temp=uart_rx();
 195   2          if(temp=='1')
 196   2          {
 197   3            set_alarm(x);
 198   3          }
 199   2          else if(temp==2)
 200   2          {
 201   3            alarm[x].status=0;
 202   3          }
 203   2          else if(temp='e' | temp=='E')
 204   2          {
 205   3                  
 206   3          return;
 207   3          }
 208   2          else 
 209   2          {
 210   3            uart_print("invalid option");
 211   3            uart_print("\r\n");
 212   3            //goto up;
 213   3          }
 214   2        }
 215   1      }
 216              
 217              
 218              
 219                                               


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    660    ----
   CONSTANT SIZE    =    114    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     20       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
